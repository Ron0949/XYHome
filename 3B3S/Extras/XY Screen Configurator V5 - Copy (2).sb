;XY Screen Configurator
IncludeFile "MIDI_File_Template_V5.sb"

Declare ReadCallback(Status, Filename$, File, Size)
Declare TimerEvents()
Declare EditMIDIFile(Type, ButtonNum, Value)
Declare KnobZeroed()
Declare LEDOff()
Declare LoadFrontPage()

;Global Dim MDhd(158)
Global Slider1Cn, Slider2Cn, Slider3Cn, Slider4Cn
Global SliderNum 

Declare NotesHandler()

;Slider and text box locations
Global XRpt = 120
Global YOffset = 115
Global TextBoxY = YOffset
Global SliderY = TextBoxY + 30

;Text boxes positions
Global NotesXPos = 38, NotesYPos = YOffset
Global OctavesXPos = NotesXPos + XRpt, OctavesYPos = YOffset
Global CtrlsXPos = OctavesXPos + XRpt, CtrlsYPos = YOffset

;Slider positions
Global NotesSliderXPos = NotesXPos -8, NotesSliderYPos = SliderY
Global OctavesSliderXPos = NotesSliderXPos + XRpt, OctavesSliderYPos = SliderY
Global CtrlsSliderXPos = CtrlsSliderXPos + OctavesSliderXPos + XRpt, CtrlsSliderYPos = SliderY

;Button origin
Global ButtonX = 106

;Variables
Global NoteNum
Global OctNum
Global CtrlNum
Global BusyFlag
Global url$ = ""

Global Config
Global Dim Link(246)

Enumeration
  #GADGET_Canvas

EndEnumeration


;Controller value display
  Procedure CtrlsHandler()
  CtrlText = TextGadget(18, CtrlsXPos, TextBoxY, 212, 23, "MIDI Controller " + Str(GetGadgetState(17)), #PB_Text_Center | #PB_Text_Border)
  SetGadgetColor(18, #PB_Gadget_BackColor,($6A8F99))
  CtrlNum = GetGadgetState(17)
  Debug CtrlNum
      
EndProcedure


;Notes value display
Procedure NotesHandler()
  Notes$ = "C C#D EbE F F#G G#A BbB "
  Note$ = Mid(Notes$,(GetGadgetState(13) * 2 +1), 2)
  NoteText = TextGadget(14, NotesXPos, TextBoxY,77, 23, "Note " + Mid(Notes$,(GetGadgetState(13) * 2 +1), 2), #PB_Text_Center | #PB_Text_Border)
  SetGadgetColor(14, #PB_Gadget_BackColor,($6A8F99))
  NoteNum = GetGadgetState(13) + (OctNum * 12)
  Debug NoteNum
    
  EndProcedure
 
  
;Octaves value display
  Procedure OctavesHandler()
  OctaveText = TextGadget(16, OctavesXPos - 5, TextBoxY, 90, 23, "Octave " + Str(GetGadgetState(15)), #PB_Text_Center | #PB_Text_Border)
  SetGadgetColor(16, #PB_Gadget_BackColor,($6A8F99))
  OctNum = GetGadgetState(15)
  NoteNum = GetGadgetState(13) + (OctNum * 12)
  Debug NoteNum
    
EndProcedure 

;Help
Procedure Help()
  Result = ExamineMouse()
  Result = MouseY()
  Debug MouseY()
  
  Debug EventGadget()
  
  Debug X
  Select EventType()
      
    Case #PB_EventType_MouseEnter
      If EventGadget() < 9   ;i.e. button
        HideGadget(22,0)     ;show button help
        
        HideGadget(23,1)     ;hide slider help
        HideGadget(24,1)     ;hide Export help
        
 ;       Result = SetGadgetAttribute(4,#PB_Cursor_Hand, 1)
        
      ElseIf EventGadget() = 21   ;i.e. Export knob
        HideGadget(24,0)     ;show Export help
        
        HideGadget(23,1)     ;hide slider help
        HideGadget(22,1)     ;hide button help
        
      ElseIf EventGadget() = 25   ;i.e. hide help
        HideGadget(24,1)     ;hide Export help       
        HideGadget(23,1)     ;hide slider help
        HideGadget(22,1)     ;hide button help
        Debug "Centre"
            
      ElseIf  EventGadget() >= 9   ;i.e. slider
        HideGadget(23,0)     ;show slider help       
        HideGadget(24,1)     ;hide Export help
        HideGadget(22,1)     ;hide button help       
      EndIf 
      
    Case #PB_EventType_MouseLeave
      HideGadget(18,0)     ;show slider text
      HideGadget(14,0)     ;show notes text
      HideGadget(16,0)     ;show octaves text
      
  EndSelect

   
  
EndProcedure


;Export knob clicked
Procedure ExportHandler()
  ImageGadget(20, 372, 466, ImageWidth(ObjectId), ImageHeight(ObjectId), ImageID(3)) ;Turn knob
  
;  ImageGadget(20, 372, 466, 0, 0, ImageID(3)) ;Turn knob
  
   AddWindowTimer(1, 2, 2000) ;knob turned duration
     BindEvent(#PB_Event_Timer, @KnobZeroed())
  Debug "Knob clicked" 
  
  ;Create and write array to file
    Select Config
   Case 1
     Result = CreateFile(0,"XY_Screen.mid",#PB_UTF8)
       For i = 1 To ArraySize(MDhd())
        WriteByte(0,MDhd(i))
       Next 
     
   Case 2
     Result = CreateFile(0,"Multi-Function.mid",#PB_UTF8)
       For i = 1 To ArraySize(MDhd())
        WriteByte(0,MDhd(i))
       Next 
     
   Case 3
     Result = CreateFile(0,"Four_Sliders.mid",#PB_UTF8)
       For i = 1 To ArraySize(MDhd())
        WriteByte(0,MDhd(i))
       Next 
     
   Case 4
     Result = CreateFile(0,"Four_Buttons.mid",#PB_UTF8)
       For i = 1 To ArraySize(MDhd())
        WriteByte(0,MDhd(i))
       Next 
     
  EndSelect  
  
; ;Write array to file
;   Result = CreateFile(0,"Screen_Config.mid",#PB_UTF8)
;   For i = 1 To ArraySize(MDhd())
;     WriteByte(0,MDhd(i))
;   Next   
  
; ;Export file And close - moved to timer 2
;   ExportFile(0,"audio/midi", #PB_LocalFile)  
;   CloseFile(0) 
;   
;     Debug "file exported" 
  

;Convert array to csv
;;  url$ = ""
    For i = 1 To ArraySize(MDhd())
      url$ = url$ + MDhd(i) + ","   
    Next
    
    url$ = "http:///winterwood.atwebpages.com/WebMidi?" + url$
    Debug url$
    
;Open window and webgadget and hide behind main image
;  If OpenWindow(89, 0, 0, 800, 300, "WebGadget", #PB_Window_SystemMenu | #PB_Window_ScreenCentered)
 
    WebGadget(90, 0, 0, 10, 10, url$)
    HideGadget(30,0)
;  EndIf


  
  EndProcedure 
  
  
;Button clicked 
  Procedure ButtonHandler(Button)
;ButtonNum = EventGadget()
;    ImageGadget(19, 390, 200, ImageWidth(ObjectId), ImageHeight(ObjectId), ImageID(2)) ;LED on
     ImageGadget(#PB_Any, 390, 200, 0, 0, ImageID(2)) ;LED on
  
    AddWindowTimer(1, 1, 300) ;LED flash duration
       BindEvent(#PB_Event_Timer, @LEDOff())

    If EventGadget() >= 9 ;i.e. slider
     Result = EditMIDIFile(1, EventGadget(), CtrlNum) ;Slider 1-4 clicked  
   Else
     Result = EditMIDIFile(2, EventGadget(), NoteNum) ;Button 1-8 clicked
   EndIf

EndProcedure


;Write new values to array
Procedure EditMIDIFile(Type, ButtonNum, Value)   
;Edit array with button and slider values  
  CcnOffset = 62
  NoteOnOffset = 82
  
  Tempo =  5 ;5 = 197 bpm, 6 = 138 bpm
  MDhd(57) = Tempo ;Edit tempo
        
  Select Type
    Case 1
;Write new slider value
  Offset = CcnOffset + (5 * (ButtonNum - 9))
  MDhd(Offset) = Value

    Case 2
;Write new note on value
  Offset = NoteOnOffset + (5 * (ButtonNum - 1))
  MDhd(Offset) = Value
    
EndSelect

;Copy array to file
  For i = 1 To ArraySize(MDhd())
    WriteByte(0,MDhd(i))
  Next 
EndProcedure


;Open display
Procedure Loaded(Type, Filename$, ObjectId)
  ; Display the image in a new window  
  If Status = #PB_Status_Loaded
   OpenWindow(1, 50, 50, 538, 598, "Manson Guitar Works - Multi-Zone Screen Configurator", #PB_Window_ScreenCentered | #PB_Window_BorderLess)

;       ImageGadget(#PB_Any, 0, 0, ImageWidth(ObjectId), ImageHeight(ObjectId), ImageID(ObjectId))
    ImageGadget(#PB_Any, 372, 466, ImageWidth(ObjectId), ImageHeight(ObjectId), ImageID(3))      ;Knob turned
    ImageGadget(#PB_Any, 390, 200, ImageWidth(ObjectId), ImageHeight(ObjectId), ImageID(2))      ;Green LED
    ImageGadget(#PB_Any, 0, 0, ImageWidth(ObjectId), ImageHeight(ObjectId), ImageID(0))      ;Front page 
    ImageGadget(#PB_Any, 390, 200, 0, 0, ImageID(1))                                         ;LED off
  
   Debug ImageWidth(ObjectId)
   Debug (ObjectID)
  ElseIf Status = #PB_Status_Error
    Debug "Error when loading the file: " + Filename$
  EndIf
  
;Draw transparent Button canvases   
  CanvasGadget(4, 106, 230, 30, 30, #PB_Canvas_Transparent)
    BindGadgetEvent(4, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(4, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(4, @Help(), #PB_EventType_MouseLeave)
    
  CanvasGadget(3, 159, 230, 30, 30, #PB_Canvas_Transparent)
    BindGadgetEvent(3, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(3, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(3, @Help(), #PB_EventType_MouseLeave)
    
  CanvasGadget(2, 215, 230, 30, 30, #PB_Canvas_Transparent)
    BindGadgetEvent(2, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(2, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(2, @Help(), #PB_EventType_MouseLeave)
    
  CanvasGadget(1, 269, 230, 30, 30, #PB_Canvas_Transparent)
    BindGadgetEvent(1, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(1, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(1, @Help(), #PB_EventType_MouseLeave)
         
  
  CanvasGadget(8, 106, 275, 30, 30, #PB_Canvas_Transparent)
    BindGadgetEvent(8, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(8, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(8, @Help(), #PB_EventType_MouseLeave)
    
  CanvasGadget(7, 159, 275, 30, 30, #PB_Canvas_Transparent)
    BindGadgetEvent(7, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(7, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(7, @Help(), #PB_EventType_MouseLeave)
    
  CanvasGadget(6, 215, 275, 30, 30, #PB_Canvas_Transparent)
    BindGadgetEvent(6, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(6, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(6, @Help(), #PB_EventType_MouseLeave)
    
  CanvasGadget(5, 269, 275, 30, 30, #PB_Canvas_Transparent)
    BindGadgetEvent(5, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(5, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(5, @Help(), #PB_EventType_MouseLeave)
    
  
;Draw transparent Slider canvases   
  CanvasGadget(12, 106, 359, 30, 125, #PB_Canvas_Transparent)
    BindGadgetEvent(12, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(12, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(12, @Help(), #PB_EventType_MouseLeave)
    
  CanvasGadget(11, 159, 359, 30, 125, #PB_Canvas_Transparent)
    BindGadgetEvent(11, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(11, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(11, @Help(), #PB_EventType_MouseLeave)
    
  CanvasGadget(10, 215, 359, 30, 125, #PB_Canvas_Transparent)
    BindGadgetEvent(10, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(10, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(10, @Help(), #PB_EventType_MouseLeave)
    
  CanvasGadget(9, 268, 359, 30, 125, #PB_Canvas_Transparent)
    BindGadgetEvent(9, @ButtonHandler(), #PB_EventType_LeftButtonDown)
    BindGadgetEvent(9, @Help(), #PB_EventType_MouseEnter)
    BindGadgetEvent(9, @Help(), #PB_EventType_MouseLeave)
    
  
;Draw turned knob canvas    
  CanvasGadget(21, 387, 483, 30, 30, #PB_Canvas_Transparent)
  BindGadgetEvent(21, @ExportHandler(), #PB_EventType_LeftButtonDown)
  BindGadgetEvent(21, @Help(), #PB_EventType_MouseEnter)
  BindGadgetEvent(21, @Help(), #PB_EventType_MouseLeave)
  
;Draw help off canvas    
  CanvasGadget(25, 0, 310, 530, 50, #PB_Canvas_Transparent)
  BindGadgetEvent(25, @Help(), #PB_EventType_MouseEnter)
  BindGadgetEvent(25, @Help(), #PB_EventType_MouseLeave)


;Draw horizontal sliders and text boxes
  NotesSlider = TrackBarGadget(13,NotesSliderXPos, SliderY, 90, 10, 0, 11)
  BindGadgetEvent(13, @NotesHandler())

  NoteText = TextGadget(14, NotesXPos, TextBoxY, 77, 23, "Select Note", #PB_Text_Center | #PB_Text_Border)
   SetGadgetColor(14, #PB_Gadget_BackColor, ($6A8F99))

  OctavesSlider = TrackBarGadget(15, OctavesSliderXPos, SliderY, 90, 10, 0, 9)
    BindGadgetEvent(15, @OctavesHandler())

  OctaveText = TextGadget(16, OctavesXPos - 5, TextBoxY, 90, 23, "Select Octave", #PB_Text_Center | #PB_Text_Border)
  SetGadgetColor(16, #PB_Gadget_BackColor, ($6A8F99))
  
  CtrlsSlider = TrackBarGadget(17, CtrlsSliderXPos, SliderY, 225, 10, 0, 127)
    BindGadgetEvent(17, @CtrlsHandler())

  CtrlsText = TextGadget(18, CtrlsXPos, TextBoxY, 212, 23, "Select Slider MIDI Controller number", #PB_Text_Center | #PB_Text_Border)
  SetGadgetColor(18, #PB_Gadget_BackColor, ($6A8F99))
  
;Button help
  HelpText = TextGadget(22, 170, 65, 320, 25, "Select the Note and Octave then click the target button.", #PB_Text_Border)
  SetGadgetColor(22, #PB_Gadget_BackColor, ($6A8F99))
  HideGadget(22,1)
  
;Slider help
  HelpText = TextGadget(23, 170, 65, 320, 25, "Select the Controller Number then click the target slider.", #PB_Text_Border)
  SetGadgetColor(23, #PB_Gadget_BackColor, ($6A8F99))
  HideGadget(23,1)
  
;Export knob help
  HelpText = TextGadget(24, 170, 65, 320, 40, "When configuration is finalised, click to export 'Screen Config.mid' to your 'Download' folder", #PB_Text_Border)
  SetGadgetColor(24, #PB_Gadget_BackColor, ($6A8F99))
  HideGadget(24,1)
  
;Programming - please wait...  
  NoteText = TextGadget(30, 100, 224, 210, 272, "Programming - please wait...", #PB_Text_Center | #PB_Text_Border)
  SetGadgetColor(30, #PB_Gadget_BackColor, ($2C2FB7))
  HideGadget(30,1)
  ;  Result = MIDITemplate(Config)     ;Generate MIDI file template
  
  MIDITemplate(Config)     ;Generate MIDI file template

  EndProcedure


Procedure LoadingError(Type, Filename$, ObjectId)
  Debug Filename$ + ": loading error"
EndProcedure


Procedure LEDOff()
  RemoveWindowTimer(1, 1)     ;fire once only
  ImageGadget(19, 390, 200, 0, 0, ImageID(1)) ;LED off 
  EndProcedure
  
  
  Procedure KnobZeroed()
    RemoveWindowTimer(1, 2)   ;fire once only
    HideGadget(20, 1)
    
;Export file And close
  ExportFile(0,"audio/midi", #PB_LocalFile)  
  CloseFile(0)
  
;Hide Programming message and close Web gadget 
  FreeGadget(90)
  HideGadget(30,1)
  
  Debug "file exported" 
    
  EndProcedure
  
  
;********************************************************************
Procedure Configure_Screen(Config)  
  ;Register the loading event before calling any resource load command
 BindEvent(#PB_Event_Loading, @Loaded())
 BindEvent(#PB_Event_LoadingError, @LoadingError())
 BindEvent(#PB_Status_Error, @LoadingError())
 
Debug "Config =" + Config
 
  Select Config
   Case 1
     LoadImage(0, "Data\XY Kaoss.png")
     
   Case 2
     LoadImage(0, "Data\Ableton.png") 
     
   Case 3
     LoadImage(0, "Data\Four Sliders.png")
     
   Case 4
     LoadImage(0, "Data\Screen Quadrants.png")
     
  EndSelect     
 
; LoadImage(0, "Data\XY Kaoss.png")
; LoadImage(0, "Data\Four Sliders.png")
; LoadImage(0, "Data\Screen Quadrants.png") 
; LoadImage(0, "Data\Ableton.png")
; LoadImage(0, "Data\Front page portrait.png")
  
LoadImage(3, "Data\Knob turned 2.png")
LoadImage(2, "Data\Green LED.png") ;2
LoadImage(1, "Data\LED Off.png")

;LoadImage(0, "Data\Front page portrait.png")

EndProcedure

;******************************************************************** 




; IDE Options = SpiderBasic 2.00 (Windows - x86)
; CursorPosition = 382
; FirstLine = 362
; Folding = ---
; WebAppName = Manson Screen Configurator
; WebAppIcon = C:\ProgramData\SpiderBasic\Projects\XY Screen Configurator\Data\Guitar_Icon.png
; HtmlFilename = Index.html
; JavaScriptFilename = XY Screen Configurator.js
; ResourceDirectory = C:\ProgramData\SpiderBasic\Projects\XY Screen Configurator
; WebAppEnableDebugger
; iOSAppOrientation = 0
; AndroidAppName = XY Screen Configurator
; AndroidAppIcon = Data\Front page portrait.png
; AndroidAppVersion = 1.0
; AndroidAppPackageID = uk.org.winterwood
; AndroidAppOutput = XY Screen Configurator.apk
; AndroidAppEnableResourceDirectory
; AndroidAppOrientation = 1
; AndroidAppEnableDebugger
; EnableXP
; CompileSourceDirectory